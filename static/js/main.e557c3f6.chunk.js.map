{"version":3,"sources":["components/Results.js","components/Navigation.js","components/ErrorPage.js","components/ChartResults.js","components/Page.js","components/App.js","serviceWorker.js","index.js"],"names":["Results","props","className","data","confirmed","deaths","recovered","Navigation","to","exact","href","ErrorPage","ChartResults","chartData","labels","datasets","map","day","Date","substring","label","Confirmed","backgroundColor","borderColor","borderWidth","console","log","Deaths","Recovered","width","height","options","scales","yAxes","ticks","beginAtZero","Page","path","component","App","state","country","time","handleSubmit","e","preventDefault","toLowerCase","period","currTimeInSecs","getTime","begTimeInSecs","begTimeUTC","URL","currTimeUTC","toISOString","fetch","then","response","json","begDay","length","currDay","TotalConfirmed","TotalDeaths","TotalRecovered","setState","handleFormChange","value","prevProps","prevState","this","basename","onSubmit","onChange","isSearchable","placeholder","type","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e557c3f6.chunk.js","sourcesContent":["import React from 'react';\n\nconst Results = (props) => (\n    <div className=\"results\">\n        <div className=\"data confirmed\">\n            <p>Confirmed:</p>\n            <p className=\"num\">{props.data.confirmed}</p>\n        </div>\n        <div className=\"data deaths\">\n            <p>Deaths:</p>\n            <p className=\"num\">{props.data.deaths}</p>\n        </div>\n        <div className=\"data recovered\">\n            <p>Recovered:</p>\n            <p className=\"num\">{props.data.recovered}</p>\n        </div>\n    </div>\n);\n\nexport default Results;\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nconst Navigation = () => {\n    return (\n        <nav className=\"nav\">\n            <NavLink to=\"/\" exact>\n                <button className=\"button button-5\">\n                    <div className=\"translate\"></div>\n                    <a href>Numbers</a>\n                </button>\n            </NavLink>\n            <NavLink to=\"/chart\">\n                <button className=\"button button-5\">\n                    <div className=\"translate\"></div>\n                    <a href>Chart</a>\n                </button>\n            </NavLink>\n        </nav>\n    );\n};\n\nexport default Navigation;\n","import { render } from '@testing-library/react';\nimport React from 'react'\n\nconst ErrorPage = () => {\n    return(\n        <div className='error'>\n            <p>This page doesn't exist</p>\n        </div>\n    )\n}\n\nexport default ErrorPage;","import React from 'react';\nimport { Bar, Line } from 'react-chartjs-2';\nimport Page from './Page';\n\nconst ChartResults = (props) => {\n    const chartData = {\n        labels: '',\n        datasets: []\n        \n    };\n\n    // Setting chart properities\n    (function(){\n        chartData.type = 'line';\n        chartData.labels = props.chartData.map(day => day.Date.substring(0,10));\n        chartData.datasets = [\n            {\n                label: 'confirmed',\n                data: props.chartData.map(day => day.Confirmed),\n                backgroundColor: 'rgb(163, 19, 48);',\n                borderColor: 'rgb(163, 19, 48);',\n                borderWidth: 1,\n            },\n\n        ]\n        \n        console.log(chartData)\n    })();\n    \n\n    return(\n    <div className=\"chart\">\n        <Line \n            data = {{\n                labels: chartData.labels,\n                datasets: [{\n                    label: 'confirmed',\n                    data: props.chartData.map(day => day.Confirmed),\n                    //backgroundColor: 'rgb(163, 19, 48)',\n                    borderColor: 'rgb(163, 19, 48)',\n                    borderWidth: 1,\n                },\n                {\n                    label: 'deaths',\n                    data: props.chartData.map(day => day.Deaths),\n                    //backgroundColor: 'rgb(46, 28, 32)',\n                    borderColor: 'rgb(46, 28, 32)',\n                    borderWidth: 1,\n                },\n                {\n                    label: 'recovered',\n                    data: props.chartData.map(day => day.Recovered),\n                    //backgroundColor: 'rgb(23, 83, 8)',\n                    borderColor: 'rgb(23, 83, 8)',\n                    borderWidth: 1,\n                },\n            \n            ]\n            }}\n            width={450} \n            height={400}\n            options = {{\n                scales: {\n                    yAxes: [{\n                        ticks: {\n                            beginAtZero: true\n                        }\n                    }]\n                }\n            }\n            }\n               \n        />\n        {/* <Line\n            data={chartData}\n            width={40}\n            height={40}\n            options={{\n                title: {\n                    text: 'covid chart',\n                    fontSize: 25\n                },\n                legend: {\n                    display: true,\n                    position: 'rignt'\n                }\n            }}\n        /> */}\n    </div>);\n};\n\nexport default ChartResults;\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\n//Importing pages\nimport Results from './Results';\nimport ChartResults from './ChartResults';\nimport ErrorPage from './ErrorPage';\n\nconst Page = (props) => {\n    return (\n        <>\n            <Switch>\n                <Route\n                    path=\"/\"\n                    exact\n                    component={() => <Results data={props.data} />}\n                />\n                <Route\n                    path=\"/chart\"\n                    component={() => \n                        <ChartResults chartData={props.chartData} />\n                    }\n                />\n                <Route path=\"/\" component={ErrorPage} />\n            </Switch>\n        </>\n    );\n};\n\nexport default Page;\n","import React, { Component } from 'react';\nimport Select from 'react-select';\nimport { BrowserRouter as Router, HashRouter } from 'react-router-dom';\n//import moment from 'moment';\nimport '../App.css';\nimport Results from './Results';\nimport Navigation from './Navigation';\nimport ErrorPage from './ErrorPage';\nimport Page from './Page';\n\nclass App extends Component {\n    state = {\n        country: '',\n        time: '',\n        data: {\n            confirmed: '-',\n            deaths: '-',\n            recovered: '-',\n        },\n        chartData: []\n    };\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        console.log('submit');\n\n        if (this.state.country !== '' && this.state.time !== '') {\n            const country = this.state.country.toLowerCase();\n            const period = this.state.time;\n\n            let currTimeInSecs = new Date().getTime();\n\n            currTimeInSecs -= currTimeInSecs % (24 * 3600000);\n\n            const currTimeUTC = new Date(currTimeInSecs).toISOString();\n\n            let begTimeInSecs;\n            const dayOneUTC = '2020-02-26T00:00:00Z';\n\n            if (period === 'yesterday') {\n                begTimeInSecs = currTimeInSecs - 2 * 24 * 3600000;\n            } else if (period === 'last 7 days') {\n                begTimeInSecs = currTimeInSecs - 7 * 24 * 3600000;\n            } else if (period === 'last 30 days') {\n                begTimeInSecs = currTimeInSecs - 30 * 24 * 3600000;\n            }\n\n            let begTimeUTC;\n            if (period === 'whole time') {\n                begTimeUTC = dayOneUTC;\n            } else {\n                begTimeUTC = new Date(begTimeInSecs).toISOString();\n            }\n\n            //console.log(currTimeUTC);\n            //console.log(begTimeUTC);\n            //console.log(country);\n            \n            let URL;\n\n            if (country === 'world') {\n                URL = `https://api.covid19api.com/world?from=${begTimeUTC}&to=${currTimeUTC}`;\n                fetch(URL)\n                    .then((response) => response.json())\n                    .then((data) => {\n                        console.log(data);\n                        const begDay = data[data.length - 1];\n                        const currDay = data[0];\n\n                        const confirmed =\n                            currDay.TotalConfirmed - begDay.TotalConfirmed;\n                        const deaths = currDay.TotalDeaths - begDay.TotalDeaths;\n                        const recovered =\n                            currDay.TotalRecovered - begDay.TotalRecovered;\n                        console.log(confirmed, deaths, recovered);\n\n                        this.setState({\n                            data: {\n                                confirmed: confirmed,\n                                deaths: deaths,\n                                recovered: recovered,\n                            },\n                            chartData: data\n                        });\n                    });\n            } else {\n                URL = `https://api.covid19api.com/country/${country}?from=${begTimeUTC}&to=${currTimeUTC}`;\n\n                fetch(URL)\n                    .then((response) => response.json())\n                    .then((data) => {\n                        console.log(data);\n                        const begDay = data[0];\n                        const currDay = data[data.length - 1];\n\n                        const confirmed = currDay.Confirmed - begDay.Confirmed;\n                        const deaths = currDay.Deaths - begDay.Deaths;\n                        const recovered = currDay.Recovered - begDay.Recovered;\n                        console.log(confirmed, deaths, recovered);\n\n                        this.setState({\n                            data: {\n                                confirmed: confirmed,\n                                deaths: deaths,\n                                recovered: recovered,\n                            },\n                            chartData: data\n                        });\n                        \n                    });\n            }\n        } else {\n            console.log('bad form');\n            /*\n                let d = new Date().getTime();\n                console.log(d);\n                d -= 7 * 24 * 3600000; //bo milisecs\n                console.log(d);\n                const cd = new Date(d).toISOString();\n                console.log(cd);\n                */\n        }\n    };\n\n    handleFormChange = (e) => {\n        //console.log(this.state);\n\n        if (\n            e.value === 'yesterday' ||\n            e.value === 'last 7 days' ||\n            e.value === 'last 30 days' ||\n            e.value === 'whole time'\n        ) {\n            this.setState({\n                time: e.value,\n            });\n        } else {\n            this.setState({\n                country: e.value,\n            });\n        }\n    };\n\n    componentDidUpdate(prevProps, prevState) {\n        console.log(this.state);\n    }\n\n    render() {\n        //FORM OPTIONS\n        const countries = [\n            //{ value: 'World', label: 'World' }, // there is a problem\n            { value: 'Poland', label: 'Poland' },\n        ];\n\n        const timePeriods = [\n            { value: 'yesterday', label: 'yesterday' },\n            { value: 'last 7 days', label: 'last 7 days' },\n            { value: 'last 30 days', label: 'last 30 days' },\n            { value: 'whole time', label: 'whole time' },\n        ];\n\n        const selectStyle = {\n            color: '#BFC0C0',\n            backgroundColor: '#2D3142',\n        };\n\n        return (\n            <HashRouter basename={'/'}>\n                <div className=\"App\">\n                    <form onSubmit={this.handleSubmit} className=\"form\">\n                        <Select\n                            options={countries}\n                            //value={this.state.country}\n                            onChange={this.handleFormChange}\n                            isSearchable\n                            placeholder=\"select country\"\n                            className=\"select\"\n                        />\n                        <Select\n                            options={timePeriods}\n                            //value={this.state.country}\n                            onChange={this.handleFormChange}\n                            placeholder=\"select time period\"\n                            className=\"select\"\n                        />\n                        <button type=\"submit\" className=\"button button-5\">\n                            <div className=\"translate\"></div>\n                            <span>Submit</span>\n                        </button>\n                    </form>\n                    <Navigation />\n                    <div className=\"results\">\n                        <Page\n                            data={this.state.data}\n                            chartData={this.state.chartData}\n                        />\n                    </div>\n                </div>\n            </HashRouter>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}